{"version":3,"file":"smart-form-predictor.umd.js","sources":["../src/FieldRelationshipGraph.js","../src/FieldPredictionModel.js","../src/FeatureEngine.js","../src/CrossSessionLearner.js","../src/RealTimePredictionEngine.js","../src/PrivacyPreservingLearner.js","../src/LocalStorage.js","../src/FieldValidator.js","../src/SmartFormPredictor.js"],"sourcesContent":["/**\n * 字段关系图谱类\n * Field Relationship Graph\n */\nexport class FieldRelationshipGraph {\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.nodes = new Map(); // 字段节点\n    this.edges = new Map(); // 字段关系\n  }\n  \n  /**\n   * 发现字段间关联关系\n   * @param {Array} formDataHistory - 表单数据历史\n   * @returns {Object} 关系分析结果\n   */\n  discoverRelationships(formDataHistory) {\n    // 1. 基于共现频率的关联发现\n    const cooccurrence = this.calculateCooccurrence(formDataHistory);\n    \n    // 2. 基于填写顺序的时间关联\n    const temporalRelations = this.analyzeTemporalPatterns(formDataHistory);\n    \n    // 3. 基于值依赖的逻辑关联\n    const valueDependencies = this.findValueDependencies(formDataHistory);\n    \n    return { cooccurrence, temporalRelations, valueDependencies };\n  }\n  \n  /**\n   * 计算字段共现频率\n   * @param {Array} history - 表单数据历史\n   * @returns {Object} 共现矩阵\n   */\n  calculateCooccurrence(history) {\n    const matrix = {};\n    history.forEach(session => {\n      const fields = Object.keys(session);\n      fields.forEach(field1 => {\n        fields.forEach(field2 => {\n          if (field1 !== field2) {\n            const key = `${field1}-${field2}`;\n            matrix[key] = (matrix[key] || 0) + 1;\n          }\n        });\n      });\n    });\n    return matrix;\n  }\n  \n  /**\n   * 分析时间模式\n   * @param {Array} history - 表单数据历史\n   * @returns {Object} 时间关联分析\n   */\n  analyzeTemporalPatterns(history) {\n    // 简化实现，实际应该分析填写顺序和时间间隔\n    const patterns = {};\n    \n    history.forEach(session => {\n      const fields = Object.keys(session);\n      for (let i = 0; i < fields.length - 1; i++) {\n        const currentField = fields[i];\n        const nextField = fields[i + 1];\n        const key = `${currentField}->${nextField}`;\n        patterns[key] = (patterns[key] || 0) + 1;\n      }\n    });\n    \n    return patterns;\n  }\n  \n  /**\n   * 查找值依赖关系\n   * @param {Array} history - 表单数据历史\n   * @returns {Object} 值依赖关系\n   */\n  findValueDependencies(history) {\n    // 简化实现，实际应该分析字段值之间的逻辑关系\n    const dependencies = {};\n    \n    // 示例：分析邮箱和用户名的关系\n    history.forEach(session => {\n      if (session.email && session.username) {\n        // 简单的依赖模式检查\n        const emailPrefix = session.email.split('@')[0];\n        if (emailPrefix === session.username) {\n          dependencies['username->email'] = (dependencies['username->email'] || 0) + 1;\n        }\n      }\n    });\n    \n    return dependencies;\n  }\n  \n  /**\n   * 添加字段节点\n   * @param {string} fieldName - 字段名\n   */\n  addNode(fieldName) {\n    if (!this.nodes.has(fieldName)) {\n      this.nodes.set(fieldName, {\n        name: fieldName,\n        type: this._inferFieldType(fieldName),\n        connections: new Set()\n      });\n    }\n  }\n  \n  /**\n   * 推断字段类型\n   * @param {string} fieldName - 字段名\n   * @returns {string} 字段类型\n   */\n  _inferFieldType(fieldName) {\n    const typePatterns = {\n      'email': ['email', 'mail'],\n      'phone': ['phone', 'tel', 'mobile'],\n      'date': ['date', 'birthday', 'dob'],\n      'name': ['name', 'first', 'last'],\n      'address': ['address', 'street', 'addr'],\n      'city': ['city'],\n      'zip': ['zip', 'postal'],\n      'country': ['country'],\n      'number': ['number', 'count', 'qty']\n    };\n    \n    for (const [type, patterns] of Object.entries(typePatterns)) {\n      if (patterns.some(pattern => fieldName.toLowerCase().includes(pattern))) {\n        return type;\n      }\n    }\n    \n    return 'text';\n  }\n  \n  /**\n   * 添加边（字段关系）\n   * @param {string} fromField - 起始字段\n   * @param {string} toField - 目标字段\n   * @param {Object} relationData - 关系数据\n   */\n  addEdge(fromField, toField, relationData = {}) {\n    this.addNode(fromField);\n    this.addNode(toField);\n    \n    const edgeKey = `${fromField}-${toField}`;\n    if (!this.edges.has(edgeKey)) {\n      this.edges.set(edgeKey, {\n        from: fromField,\n        to: toField,\n        ...relationData\n      });\n      \n      // 更新节点连接信息\n      this.nodes.get(fromField).connections.add(toField);\n      this.nodes.get(toField).connections.add(fromField);\n    }\n  }\n}","/**\n * 字段预测模型类\n * Field Prediction Model\n */\nexport class FieldPredictionModel {\n  /**\n   * 构造函数\n   * @param {string} fieldType - 字段类型\n   */\n  constructor(fieldType) {\n    this.fieldType = fieldType;\n    this.trainingData = [];\n    this.model = null;\n    this.accuracy = 0;\n  }\n  \n  /**\n   * 训练预测模型\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   */\n  async train(features, labels) {\n    // 根据字段类型选择不同算法\n    switch(this.fieldType) {\n      case 'categorical':\n        return this.trainDecisionTree(features, labels);\n      case 'numerical':\n        return this.trainRegression(features, labels);\n      case 'text':\n        return this.trainTextPrediction(features, labels);\n      default:\n        return this.trainGenericModel(features, labels);\n    }\n  }\n  \n  /**\n   * 决策树训练（用于分类字段）\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   */\n  trainDecisionTree(features, labels) {\n    // 简化的决策树实现，适合浏览器环境\n    this.model = {\n      type: 'decisionTree',\n      predict: (context) => {\n        // 基于特征匹配的预测逻辑\n        const matches = this.findSimilarContexts(context, features, labels);\n        return this.majorityVote(matches);\n      }\n    };\n    \n    return this.model;\n  }\n  \n  /**\n   * 回归训练（用于数值字段）\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   */\n  trainRegression(features, labels) {\n    // 简化的线性回归实现\n    this.model = {\n      type: 'regression',\n      coefficients: this.calculateRegressionCoefficients(features, labels),\n      predict: (context) => {\n        return this.applyRegression(context, this.model.coefficients);\n      }\n    };\n    \n    return this.model;\n  }\n  \n  /**\n   * 文本预测模型\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   */\n  trainTextPrediction(features, labels) {\n    // 构建字符级或词级的预测模型\n    const markovChain = this.buildMarkovChain(labels);\n    \n    this.model = {\n      type: 'markovChain',\n      markovChain: markovChain,\n      predict: (partialInput, context) => {\n        return markovChain.predict(partialInput, context);\n      }\n    };\n    \n    return this.model;\n  }\n  \n  /**\n   * 通用模型训练\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   */\n  trainGenericModel(features, labels) {\n    // 使用简单的最近邻算法\n    this.model = {\n      type: 'knn',\n      trainingFeatures: features,\n      trainingLabels: labels,\n      predict: (context) => {\n        return this.kNearestNeighbors(context, features, labels);\n      }\n    };\n    \n    return this.model;\n  }\n  \n  /**\n   * 查找相似上下文\n   * @param {Object} context - 当前上下文\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   * @returns {Array} 匹配的结果\n   */\n  findSimilarContexts(context, features, labels) {\n    const matches = [];\n    const threshold = 0.7; // 相似度阈值\n    \n    for (let i = 0; i < features.length; i++) {\n      const similarity = this.calculateSimilarity(context, features[i]);\n      if (similarity >= threshold) {\n        matches.push({\n          similarity: similarity,\n          label: labels[i]\n        });\n      }\n    }\n    \n    return matches;\n  }\n  \n  /**\n   * 计算相似度\n   * @param {Object} context1 - 上下文1\n   * @param {Object} context2 - 上下文2\n   * @returns {number} 相似度分数\n   */\n  calculateSimilarity(context1, context2) {\n    // 简化的相似度计算\n    let matches = 0;\n    let total = 0;\n    \n    for (const key in context1) {\n      if (context1.hasOwnProperty(key) && context2.hasOwnProperty(key)) {\n        total++;\n        if (context1[key] === context2[key]) {\n          matches++;\n        }\n      }\n    }\n    \n    return total > 0 ? matches / total : 0;\n  }\n  \n  /**\n   * 多数投票\n   * @param {Array} matches - 匹配结果\n   * @returns {any} 投票结果\n   */\n  majorityVote(matches) {\n    if (matches.length === 0) return null;\n    \n    // 按相似度加权投票\n    const voteCount = {};\n    let maxVotes = 0;\n    let winner = null;\n    \n    for (const match of matches) {\n      const label = match.label;\n      const weight = match.similarity;\n      voteCount[label] = (voteCount[label] || 0) + weight;\n      \n      if (voteCount[label] > maxVotes) {\n        maxVotes = voteCount[label];\n        winner = label;\n      }\n    }\n    \n    return winner;\n  }\n  \n  /**\n   * 构建马尔可夫链\n   * @param {Array} labels - 标签数据\n   * @returns {Object} 马尔可夫链模型\n   */\n  buildMarkovChain(labels) {\n    // 简化的马尔可夫链实现\n    const transitions = {};\n    const starters = {};\n    \n    labels.forEach(label => {\n      const parts = label.toString().split(/\\s+/);\n      \n      // 记录起始词\n      if (parts.length > 0) {\n        starters[parts[0]] = (starters[parts[0]] || 0) + 1;\n      }\n      \n      // 构建转移概率\n      for (let i = 0; i < parts.length - 1; i++) {\n        const current = parts[i];\n        const next = parts[i + 1];\n        \n        if (!transitions[current]) {\n          transitions[current] = {};\n        }\n        \n        transitions[current][next] = (transitions[current][next] || 0) + 1;\n      }\n    });\n    \n    return {\n      transitions: transitions,\n      starters: starters,\n      predict: (partialInput, context) => {\n        // 简化的预测实现\n        return this.predictWithMarkovChain(partialInput, transitions, starters);\n      }\n    };\n  }\n  \n  /**\n   * 使用马尔可夫链进行预测\n   * @param {string} partialInput - 部分输入\n   * @param {Object} transitions - 转移概率\n   * @param {Object} starters - 起始词\n   * @returns {string} 预测结果\n   */\n  predictWithMarkovChain(partialInput, transitions, starters) {\n    if (!partialInput) {\n      // 如果没有输入，随机选择一个起始词\n      const starterWords = Object.keys(starters);\n      if (starterWords.length > 0) {\n        const randomIndex = Math.floor(Math.random() * starterWords.length);\n        return starterWords[randomIndex];\n      }\n      return '';\n    }\n    \n    // 基于部分输入进行预测\n    const words = partialInput.split(/\\s+/);\n    const lastWord = words[words.length - 1];\n    \n    if (transitions[lastWord]) {\n      const nextWords = Object.keys(transitions[lastWord]);\n      if (nextWords.length > 0) {\n        // 选择最常见的下一个词\n        let maxCount = 0;\n        let mostCommon = '';\n        \n        for (const word of nextWords) {\n          const count = transitions[lastWord][word];\n          if (count > maxCount) {\n            maxCount = count;\n            mostCommon = word;\n          }\n        }\n        \n        return mostCommon;\n      }\n    }\n    \n    return '';\n  }\n  \n  /**\n   * 计算回归系数\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   * @returns {Array} 回归系数\n   */\n  calculateRegressionCoefficients(features, labels) {\n    // 简化的线性回归实现\n    // 在实际应用中，这会是一个更复杂的算法\n    return [0.5, 0.3, 0.2]; // 示例系数\n  }\n  \n  /**\n   * 应用回归模型\n   * @param {Object} context - 上下文\n   * @param {Array} coefficients - 系数\n   * @returns {number} 预测值\n   */\n  applyRegression(context, coefficients) {\n    // 简化的线性组合\n    let result = 0;\n    const values = Object.values(context);\n    \n    for (let i = 0; i < Math.min(values.length, coefficients.length); i++) {\n      result += values[i] * coefficients[i];\n    }\n    \n    return result;\n  }\n  \n  /**\n   * K近邻算法\n   * @param {Object} context - 当前上下文\n   * @param {Array} features - 特征数据\n   * @param {Array} labels - 标签数据\n   * @returns {any} 预测标签\n   */\n  kNearestNeighbors(context, features, labels, k = 3) {\n    // 计算所有训练样本与当前上下文的距离\n    const distances = features.map((feature, index) => ({\n      distance: this.euclideanDistance(context, feature),\n      label: labels[index]\n    }));\n    \n    // 按距离排序并取前k个\n    distances.sort((a, b) => a.distance - b.distance);\n    const kNearest = distances.slice(0, k);\n    \n    // 简化：返回最近邻的标签\n    return kNearest.length > 0 ? kNearest[0].label : null;\n  }\n  \n  /**\n   * 计算欧几里得距离\n   * @param {Object} point1 - 点1\n   * @param {Object} point2 - 点2\n   * @returns {number} 距离\n   */\n  euclideanDistance(point1, point2) {\n    let sum = 0;\n    const keys = [...new Set([...Object.keys(point1), ...Object.keys(point2)])];\n    \n    for (const key of keys) {\n      const val1 = point1[key] || 0;\n      const val2 = point2[key] || 0;\n      sum += Math.pow(val1 - val2, 2);\n    }\n    \n    return Math.sqrt(sum);\n  }\n}","/**\n * 特征工程类\n * Feature Engineering Engine\n */\nexport class FeatureEngine {\n  /**\n   * 构造函数\n   */\n  constructor() {\n    // 初始化时间跟踪\n    this.typingStartTimes = new Map();\n    this.fieldEntryTimes = new Map();\n  }\n  \n  /**\n   * 提取特征\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} formState - 表单状态\n   * @param {Object} userContext - 用户上下文\n   * @returns {Object} 特征对象\n   */\n  extractFeatures(field, formState, userContext = {}) {\n    const features = {\n      // 表单上下文特征\n      formContext: {\n        filledFields: this.getFilledFields(formState),\n        fieldSequence: this.getFieldSequence(formState),\n        timeSpent: this.getTimeSpentPerField(formState)\n      },\n      \n      // 用户行为特征\n      userBehavior: {\n        typingSpeed: this.calculateTypingSpeed(field),\n        correctionPattern: this.getCorrectionPattern(field),\n        hesitationTime: this.getHesitationTime(field)\n      },\n      \n      // 语义特征\n      semantic: {\n        fieldCategory: this.categorizeField(field),\n        expectedFormat: this.detectExpectedFormat(field),\n        relationshipStrength: this.getRelationshipStrength(field, formState)\n      },\n      \n      // 用户上下文特征\n      userContext: {\n        deviceType: this.detectDeviceType(),\n        timeOfDay: this.getTimeOfDay(),\n        dayOfWeek: this.getDayOfWeek(),\n        ...userContext\n      }\n    };\n    \n    return this.normalizeFeatures(features);\n  }\n  \n  /**\n   * 获取已填充字段\n   * @param {Object} formState - 表单状态\n   * @returns {Array} 已填充字段列表\n   */\n  getFilledFields(formState) {\n    return Object.keys(formState).filter(fieldName => {\n      const field = formState[fieldName];\n      return field.value && field.value.toString().trim() !== '';\n    });\n  }\n  \n  /**\n   * 获取字段填写顺序\n   * @param {Object} formState - 表单状态\n   * @returns {Array} 字段顺序列表\n   */\n  getFieldSequence(formState) {\n    // 简化实现，实际应基于焦点变化历史\n    return Object.keys(formState).filter(fieldName => {\n      const field = formState[fieldName];\n      return field.focused || (field.value && field.value.toString().trim() !== '');\n    });\n  }\n  \n  /**\n   * 获取每个字段花费的时间\n   * @param {Object} formState - 表单状态\n   * @returns {Object} 时间分布\n   */\n  getTimeSpentPerField(formState) {\n    const timeSpent = {};\n    \n    for (const [fieldName, field] of Object.entries(formState)) {\n      if (field.focusStartTime) {\n        const startTime = parseInt(field.focusStartTime);\n        const currentTime = Date.now();\n        timeSpent[fieldName] = currentTime - startTime;\n      }\n    }\n    \n    return timeSpent;\n  }\n  \n  /**\n   * 计算打字速度\n   * @param {HTMLElement} field - 字段元素\n   * @returns {number} 打字速度（字符/分钟）\n   */\n  calculateTypingSpeed(field) {\n    // 简化实现，实际应跟踪按键事件\n    const value = field.value || '';\n    const startTime = this.typingStartTimes.get(field) || Date.now();\n    const elapsedTime = (Date.now() - startTime) / 1000 / 60; // 转换为分钟\n    \n    if (elapsedTime > 0) {\n      return value.length / elapsedTime;\n    }\n    \n    return 0;\n  }\n  \n  /**\n   * 获取修正模式\n   * @param {HTMLElement} field - 字段元素\n   * @returns {string} 修正模式\n   */\n  getCorrectionPattern(field) {\n    // 简化实现，实际应跟踪删除和修改操作\n    return 'unknown';\n  }\n  \n  /**\n   * 获取犹豫时间\n   * @param {HTMLElement} field - 字段元素\n   * @returns {number} 犹豫时间（毫秒）\n   */\n  getHesitationTime(field) {\n    // 简化实现，实际应测量首次输入前的延迟\n    return 0;\n  }\n  \n  /**\n   * 字段分类\n   * @param {HTMLElement} field - 字段元素\n   * @returns {string} 字段类别\n   */\n  categorizeField(field) {\n    const fieldName = field.name || '';\n    const fieldType = field.type || '';\n    \n    const patterns = {\n      personal: ['name', 'email', 'phone', 'address', 'firstName', 'lastName'],\n      professional: ['company', 'title', 'department', 'position'],\n      temporal: ['date', 'time', 'birthday', 'dob', 'year'],\n      location: ['city', 'state', 'country', 'zipcode', 'postal', 'location'],\n      financial: ['card', 'credit', 'payment', 'price', 'cost'],\n      identification: ['id', 'passport', 'ssn', 'social']\n    };\n    \n    // 基于字段名分类\n    for (const [category, keywords] of Object.entries(patterns)) {\n      if (keywords.some(keyword => \n        fieldName.toLowerCase().includes(keyword) || \n        fieldType.toLowerCase().includes(keyword))) {\n        return category;\n      }\n    }\n    \n    // 基于字段类型分类\n    const typeCategories = {\n      'email': 'personal',\n      'tel': 'personal',\n      'date': 'temporal',\n      'number': 'financial'\n    };\n    \n    if (typeCategories[fieldType]) {\n      return typeCategories[fieldType];\n    }\n    \n    return 'generic';\n  }\n  \n  /**\n   * 检测预期格式\n   * @param {HTMLElement} field - 字段元素\n   * @returns {string} 预期格式\n   */\n  detectExpectedFormat(field) {\n    const fieldName = field.name || '';\n    const fieldType = field.type || '';\n    \n    // 基于字段类型判断\n    if (fieldType === 'email') return 'email';\n    if (fieldType === 'tel') return 'phone';\n    if (fieldType === 'date') return 'date';\n    if (fieldType === 'number') return 'number';\n    \n    // 基于字段名判断\n    if (fieldName.includes('email')) return 'email';\n    if (fieldName.includes('phone') || fieldName.includes('tel')) return 'phone';\n    if (fieldName.includes('date') || fieldName.includes('birthday')) return 'date';\n    if (fieldName.includes('zip') || fieldName.includes('postal')) return 'zipcode';\n    \n    // 基于pattern属性判断\n    if (field.pattern) {\n      // 简化实现，实际应解析pattern\n      return 'custom';\n    }\n    \n    return 'text';\n  }\n  \n  /**\n   * 获取关系强度\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} formState - 表单状态\n   * @returns {number} 关系强度\n   */\n  getRelationshipStrength(field, formState) {\n    // 简化实现，实际应基于字段关系图谱\n    const fieldName = field.name || '';\n    const filledFields = this.getFilledFields(formState);\n    \n    // 简单的相关性计算\n    if (filledFields.length === 0) return 0;\n    \n    // 基于字段名相似度计算关系强度\n    let strength = 0;\n    for (const filledField of filledFields) {\n      if (filledField !== fieldName) {\n        const similarity = this.calculateStringSimilarity(fieldName, filledField);\n        strength = Math.max(strength, similarity);\n      }\n    }\n    \n    return strength;\n  }\n  \n  /**\n   * 计算字符串相似度\n   * @param {string} str1 - 字符串1\n   * @param {string} str2 - 字符串2\n   * @returns {number} 相似度\n   */\n  calculateStringSimilarity(str1, str2) {\n    // 使用简单的Jaccard相似度\n    const set1 = new Set(str1.toLowerCase().split(''));\n    const set2 = new Set(str2.toLowerCase().split(''));\n    \n    const intersection = new Set([...set1].filter(x => set2.has(x)));\n    const union = new Set([...set1, ...set2]);\n    \n    return union.size > 0 ? intersection.size / union.size : 0;\n  }\n  \n  /**\n   * 检测设备类型\n   * @returns {string} 设备类型\n   */\n  detectDeviceType() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    \n    // 检测移动设备\n    if (/android/i.test(userAgent)) {\n      return 'android';\n    }\n    \n    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n      return 'ios';\n    }\n    \n    // 检测桌面设备\n    if (/Win/.test(userAgent)) {\n      return 'windows';\n    }\n    \n    if (/Mac/.test(userAgent)) {\n      return 'mac';\n    }\n    \n    if (/Linux/.test(userAgent)) {\n      return 'linux';\n    }\n    \n    return 'desktop';\n  }\n  \n  /**\n   * 获取一天中的时间\n   * @returns {string} 时间段\n   */\n  getTimeOfDay() {\n    const hour = new Date().getHours();\n    \n    if (hour >= 6 && hour < 12) {\n      return 'morning';\n    } else if (hour >= 12 && hour < 18) {\n      return 'afternoon';\n    } else if (hour >= 18 && hour < 22) {\n      return 'evening';\n    } else {\n      return 'night';\n    }\n  }\n  \n  /**\n   * 获取星期几\n   * @returns {string} 星期几\n   */\n  getDayOfWeek() {\n    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    return days[new Date().getDay()];\n  }\n  \n  /**\n   * 归一化特征\n   * @param {Object} features - 特征对象\n   * @returns {Object} 归一化后的特征\n   */\n  normalizeFeatures(features) {\n    // 简化实现，实际应对数值特征进行归一化处理\n    return features;\n  }\n}","/**\n * 跨会话学习类\n * Cross Session Learner\n */\nexport class CrossSessionLearner {\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.userProfile = {};\n  }\n  \n  /**\n   * 学习跨会话模式\n   * @param {Array} sessions - 会话数据\n   * @returns {Object} 用户画像\n   */\n  learnCrossSessionPatterns(sessions) {\n    const patterns = {\n      // 用户个人信息的关联模式\n      personalInfo: this.extractPersonalInfoPatterns(sessions),\n      \n      // 工作信息的填写习惯\n      professionalPatterns: this.extractProfessionalPatterns(sessions),\n      \n      // 时间相关的填写模式\n      temporalPatterns: this.extractTemporalPatterns(sessions),\n      \n      // 设备特定的填写行为\n      deviceSpecific: this.analyzeDeviceSpecificBehavior(sessions)\n    };\n    \n    // 构建个性化填写档案\n    return this.buildUserProfile(patterns);\n  }\n  \n  /**\n   * 提取个人信息模式\n   * @param {Array} sessions - 会话数据\n   * @returns {Object} 个人信息模式\n   */\n  extractPersonalInfoPatterns(sessions) {\n    return sessions.reduce((patterns, session) => {\n      // 分析姓名、地址、联系方式之间的关联\n      if (session.firstName && session.lastName) {\n        const namePattern = `${session.firstName} ${session.lastName}`;\n        patterns.names = patterns.names || new Set();\n        patterns.names.add(namePattern);\n      }\n      \n      // 分析地址组成模式\n      if (session.address && session.city) {\n        const locationKey = `${session.city}-${session.state || ''}`;\n        patterns.locations = patterns.locations || new Map();\n        patterns.locations.set(locationKey, \n          (patterns.locations.get(locationKey) || 0) + 1);\n      }\n      \n      // 分析邮箱和姓名的关系\n      if (session.email && session.firstName) {\n        const emailPrefix = session.email.split('@')[0];\n        const nameMatch = emailPrefix.toLowerCase() === session.firstName.toLowerCase();\n        patterns.emailNameMatch = patterns.emailNameMatch || 0;\n        if (nameMatch) {\n          patterns.emailNameMatch++;\n        }\n      }\n      \n      return patterns;\n    }, {});\n  }\n  \n  /**\n   * 提取工作信息模式\n   * @param {Array} sessions - 会话数据\n   * @returns {Object} 工作信息模式\n   */\n  extractProfessionalPatterns(sessions) {\n    return sessions.reduce((patterns, session) => {\n      // 分析公司和职位的关系\n      if (session.company && session.title) {\n        const key = `${session.company}-${session.title}`;\n        patterns.companyTitle = patterns.companyTitle || new Map();\n        patterns.companyTitle.set(key, (patterns.companyTitle.get(key) || 0) + 1);\n      }\n      \n      return patterns;\n    }, {});\n  }\n  \n  /**\n   * 提取时间相关模式\n   * @param {Array} sessions - 会话数据\n   * @returns {Object} 时间模式\n   */\n  extractTemporalPatterns(sessions) {\n    return sessions.reduce((patterns, session) => {\n      // 分析填写时间模式\n      const timestamp = session.timestamp || Date.now();\n      const date = new Date(timestamp);\n      \n      // 按小时分析\n      const hour = date.getHours();\n      patterns.hourly = patterns.hourly || {};\n      patterns.hourly[hour] = (patterns.hourly[hour] || 0) + 1;\n      \n      // 按星期分析\n      const day = date.getDay();\n      patterns.weekly = patterns.weekly || {};\n      patterns.weekly[day] = (patterns.weekly[day] || 0) + 1;\n      \n      return patterns;\n    }, {});\n  }\n  \n  /**\n   * 分析设备特定行为\n   * @param {Array} sessions - 会话数据\n   * @returns {Object} 设备行为模式\n   */\n  analyzeDeviceSpecificBehavior(sessions) {\n    return sessions.reduce((patterns, session) => {\n      const device = session.deviceType || 'unknown';\n      \n      // 统计设备使用频率\n      patterns.usage = patterns.usage || {};\n      patterns.usage[device] = (patterns.usage[device] || 0) + 1;\n      \n      // 分析设备特定的填写速度\n      if (session.fillDuration) {\n        patterns.speed = patterns.speed || {};\n        patterns.speed[device] = patterns.speed[device] || [];\n        patterns.speed[device].push(session.fillDuration);\n      }\n      \n      return patterns;\n    }, {});\n  }\n  \n  /**\n   * 构建用户画像\n   * @param {Object} patterns - 模式数据\n   * @returns {Object} 用户画像\n   */\n  buildUserProfile(patterns) {\n    const profile = {};\n    \n    // 个人信息偏好\n    if (patterns.personalInfo.names) {\n      profile.preferredNames = Array.from(patterns.personalInfo.names);\n    }\n    \n    if (patterns.personalInfo.locations) {\n      // 找出最常用的位置\n      let mostFrequentLocation = '';\n      let maxCount = 0;\n      \n      for (const [location, count] of patterns.personalInfo.locations.entries()) {\n        if (count > maxCount) {\n          maxCount = count;\n          mostFrequentLocation = location;\n        }\n      }\n      \n      profile.preferredLocation = mostFrequentLocation;\n    }\n    \n    // 工作信息偏好\n    if (patterns.professionalPatterns.companyTitle) {\n      // 找出最常用的公司-职位组合\n      let mostFrequentCombo = '';\n      let maxCount = 0;\n      \n      for (const [combo, count] of patterns.professionalPatterns.companyTitle.entries()) {\n        if (count > maxCount) {\n          maxCount = count;\n          mostFrequentCombo = combo;\n        }\n      }\n      \n      profile.preferredWorkInfo = mostFrequentCombo;\n    }\n    \n    // 时间偏好\n    if (patterns.temporalPatterns.hourly) {\n      // 找出最活跃的时段\n      let mostActiveHour = 0;\n      let maxCount = 0;\n      \n      for (const [hour, count] of Object.entries(patterns.temporalPatterns.hourly)) {\n        if (count > maxCount) {\n          maxCount = count;\n          mostActiveHour = parseInt(hour);\n        }\n      }\n      \n      profile.preferredHour = mostActiveHour;\n    }\n    \n    // 设备偏好\n    if (patterns.deviceSpecific.usage) {\n      // 找出最常用的设备\n      let preferredDevice = '';\n      let maxUsage = 0;\n      \n      for (const [device, count] of Object.entries(patterns.deviceSpecific.usage)) {\n        if (count > maxUsage) {\n          maxUsage = count;\n          preferredDevice = device;\n        }\n      }\n      \n      profile.preferredDevice = preferredDevice;\n    }\n    \n    this.userProfile = profile;\n    return profile;\n  }\n  \n  /**\n   * 获取用户画像\n   * @returns {Object} 用户画像\n   */\n  getUserProfile() {\n    return this.userProfile;\n  }\n  \n  /**\n   * 更新用户画像\n   * @param {Object} newPatterns - 新模式\n   */\n  updateUserProfile(newPatterns) {\n    // 简化实现，实际应考虑权重和衰减\n    Object.assign(this.userProfile, this.buildUserProfile(newPatterns));\n  }\n}","/**\n * 实时预测引擎类\n * Real-time Prediction Engine\n */\nexport class RealTimePredictionEngine {\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.confidenceThreshold = 0.7;\n    this.predictionCache = new Map(); // 简化的LRU缓存\n    this.cacheSizeLimit = 100;\n    \n    // 初始化训练数据存储\n    this.trainingData = new Map();\n    \n    // 从本地存储加载训练数据\n    this._loadTrainingData();\n  }\n  \n  /**\n   * 添加训练数据\n   * @param {Object} formData - 表单数据\n   */\n  addTrainingData(formData) {\n    // 为每个字段添加训练数据\n    for (const [fieldName, value] of Object.entries(formData)) {\n      if (!this.trainingData.has(fieldName)) {\n        this.trainingData.set(fieldName, []);\n      }\n      \n      // 添加数据到训练集\n      this.trainingData.get(fieldName).push({\n        value: value,\n        timestamp: Date.now()\n      });\n    }\n    \n    // 保存训练数据到本地存储\n    this._saveTrainingData();\n  }\n  \n  /**\n   * 保存训练数据到本地存储\n   */\n  _saveTrainingData() {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        // 转换Map为可序列化的对象\n        const serializableData = {};\n        for (const [key, value] of this.trainingData.entries()) {\n          serializableData[key] = value;\n        }\n        \n        localStorage.setItem('smart-form-training-data', JSON.stringify(serializableData));\n      }\n    } catch (error) {\n      console.warn('Failed to save training data:', error);\n    }\n  }\n  \n  /**\n   * 从本地存储加载训练数据\n   */\n  _loadTrainingData() {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        const storedData = localStorage.getItem('smart-form-training-data');\n        if (storedData) {\n          const parsedData = JSON.parse(storedData);\n          \n          // 恢复训练数据\n          Object.keys(parsedData).forEach(fieldName => {\n            this.trainingData.set(fieldName, parsedData[fieldName]);\n          });\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load training data:', error);\n    }\n  }\n  \n  /**\n   * 实时预测字段值\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} context - 上下文信息\n   * @returns {Promise<Object>} 预测结果\n   */\n  async predictFieldValue(field, context) {\n    // 检查字段是否存在\n    if (!field) {\n      return {\n        value: null,\n        confidence: 0,\n        alternatives: [],\n        source: 'unknown'\n      };\n    }\n    \n    const cacheKey = this.generateCacheKey(field, context);\n    \n    // 缓存优化\n    if (this.predictionCache.has(cacheKey)) {\n      return this.predictionCache.get(cacheKey);\n    }\n    \n    // 基于训练数据进行预测\n    const prediction = this._predictFromTrainingData(field, context);\n    \n    // 缓存结果\n    this._setCache(cacheKey, prediction);\n    return prediction;\n  }\n  \n  /**\n   * 基于训练数据进行预测\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} context - 上下文信息\n   * @returns {Object} 预测结果\n   */\n  _predictFromTrainingData(field, context) {\n    const fieldName = field.name;\n    \n    // 检查是否有训练数据\n    if (!this.trainingData.has(fieldName) || this.trainingData.get(fieldName).length === 0) {\n      // 如果没有训练数据，返回通用预测\n      return this._getGenericPrediction(field, context);\n    }\n    \n    const trainingData = this.trainingData.get(fieldName);\n    \n    // 如果是文本字段且有部分输入，使用前缀匹配\n    if (field.value && field.value.length > 0) {\n      const partialValue = field.value;\n      const matches = trainingData.filter(item => \n        item.value && item.value.toString().toLowerCase().startsWith(partialValue.toLowerCase())\n      );\n      \n      if (matches.length > 0) {\n        // 返回最常用的匹配值\n        const valueCounts = {};\n        matches.forEach(match => {\n          const value = match.value.toString();\n          valueCounts[value] = (valueCounts[value] || 0) + 1;\n        });\n        \n        let mostFrequentValue = '';\n        let maxCount = 0;\n        \n        for (const [value, count] of Object.entries(valueCounts)) {\n          if (count > maxCount) {\n            maxCount = count;\n            mostFrequentValue = value;\n          }\n        }\n        \n        return {\n          value: mostFrequentValue,\n          confidence: Math.min(0.95, maxCount / matches.length),\n          alternatives: Object.keys(valueCounts).slice(0, 5),\n          source: 'training-data'\n        };\n      }\n    }\n    \n    // 如果没有部分匹配，返回最常用的值\n    const valueCounts = {};\n    trainingData.forEach(item => {\n      const value = item.value.toString();\n      valueCounts[value] = (valueCounts[value] || 0) + 1;\n    });\n    \n    let mostFrequentValue = '';\n    let maxCount = 0;\n    \n    for (const [value, count] of Object.entries(valueCounts)) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostFrequentValue = value;\n      }\n    }\n    \n    return {\n      value: mostFrequentValue,\n      confidence: Math.min(0.9, maxCount / trainingData.length),\n      alternatives: Object.keys(valueCounts).slice(0, 5),\n      source: 'training-data'\n    };\n  }\n  \n  /**\n   * 通用预测（当没有训练数据时使用）\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} context - 上下文信息\n   * @returns {Object} 预测结果\n   */\n  _getGenericPrediction(field, context) {\n    const fieldName = field.name;\n    \n    // 基于字段名的通用预测\n    if (fieldName.includes('email')) {\n      return {\n        value: 'user@example.com',\n        confidence: 0.3,\n        alternatives: ['user@example.com', 'person@gmail.com'],\n        source: 'generic'\n      };\n    }\n    \n    if (fieldName.includes('phone')) {\n      return {\n        value: '(555) 123-4567',\n        confidence: 0.3,\n        alternatives: ['(555) 123-4567', '(555) 987-6543'],\n        source: 'generic'\n      };\n    }\n    \n    if (fieldName.includes('fullName')) {\n      return {\n        value: 'John Doe',\n        confidence: 0.2,\n        alternatives: ['John Doe', 'Jane Smith', 'Michael Johnson'],\n        source: 'generic'\n      };\n    }\n    \n    // 默认返回空预测\n    return {\n      value: null,\n      confidence: 0,\n      alternatives: [],\n      source: 'generic'\n    };\n  }\n  \n  /**\n   * 生成缓存键\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} context - 上下文信息\n   * @returns {string} 缓存键\n   */\n  generateCacheKey(field, context) {\n    // 检查字段是否存在\n    if (!field) return 'unknown';\n    \n    // 简化实现，实际应更复杂\n    return `${field.name}-${JSON.stringify(context)}`;\n  }\n  \n  /**\n   * 设置缓存\n   * @param {string} key - 缓存键\n   * @param {any} value - 缓存值\n   */\n  _setCache(key, value) {\n    // 简单的LRU实现\n    if (this.predictionCache.size >= this.cacheSizeLimit) {\n      // 删除第一个（最旧的）条目\n      const firstKey = this.predictionCache.keys().next().value;\n      this.predictionCache.delete(firstKey);\n    }\n    \n    this.predictionCache.set(key, value);\n  }\n}","/**\n * 隐私保护学习类\n * Privacy Preserving Learner\n */\nexport class PrivacyPreservingLearner {\n  /**\n   * 构造函数\n   */\n  constructor() {\n    // 隐私预算管理\n    this.privacyBudget = 1.0;\n    this.usedBudget = 0;\n  }\n  \n  /**\n   * 使用隐私保护方式学习\n   * @param {Array} rawData - 原始数据\n   * @param {number} privacyBudget - 隐私预算\n   * @returns {Array} 处理后的数据\n   */\n  learnWithPrivacy(rawData, privacyBudget) {\n    // 检查隐私预算\n    if (this.usedBudget + privacyBudget > this.privacyBudget) {\n      console.warn('Privacy budget exceeded, reducing budget allocation');\n      privacyBudget = this.privacyBudget - this.usedBudget;\n      if (privacyBudget <= 0) {\n        return rawData; // 隐私预算耗尽，不进行隐私保护处理\n      }\n    }\n    \n    // 更新已使用的预算\n    this.usedBudget += privacyBudget;\n    \n    // 添加噪声保护隐私\n    const noisyData = this.addLaplaceNoise(rawData, privacyBudget);\n    \n    // 数据泛化防止个人信息泄露\n    const generalizedData = this.generalizeSensitiveFields(noisyData);\n    \n    // 联邦学习风格的本地更新\n    return this.updateLocalModel(generalizedData);\n  }\n  \n  /**\n   * 添加拉普拉斯噪声\n   * @param {Array} data - 数据\n   * @param {number} epsilon - 隐私预算参数\n   * @returns {Array} 添加噪声后的数据\n   */\n  addLaplaceNoise(data, epsilon) {\n    // 拉普拉斯机制实现差分隐私\n    const scale = 1 / epsilon;\n    \n    return data.map(record => {\n      if (typeof record === 'object' && record !== null) {\n        const noisyRecord = {};\n        for (const [key, value] of Object.entries(record)) {\n          if (typeof value === 'number') {\n            const noise = this.generateLaplaceNoise(scale);\n            noisyRecord[key] = value + noise;\n          } else {\n            noisyRecord[key] = value; // 非数值字段不添加噪声\n          }\n        }\n        return noisyRecord;\n      } else if (typeof record === 'number') {\n        const noise = this.generateLaplaceNoise(scale);\n        return record + noise;\n      }\n      return record; // 非数值数据不添加噪声\n    });\n  }\n  \n  /**\n   * 生成拉普拉斯噪声\n   * @param {number} scale - 噪声尺度\n   * @returns {number} 拉普拉斯噪声\n   */\n  generateLaplaceNoise(scale) {\n    // 使用Box-Muller变换生成拉普拉斯分布噪声的简化实现\n    const u = Math.random() - 0.5;\n    return -scale * Math.sign(u) * Math.log(1 - 2 * Math.abs(u));\n  }\n  \n  /**\n   * 敏感字段泛化\n   * @param {Array} data - 数据\n   * @returns {Array} 泛化后的数据\n   */\n  generalizeSensitiveFields(data) {\n    return data.map(record => {\n      if (typeof record === 'object' && record !== null) {\n        const generalizedRecord = { ...record };\n        \n        // 对需要保护的敏感字段进行泛化\n        // 采用不同的策略：\n        // 1. 功能性字段（email, phone等）保持原始数据用于UI显示\n        // 2. 统计性字段（age, income等）可以适度泛化用于模型训练\n        // 3. 高度敏感字段（身份证等）严格保护\n\n        // 年龄字段进行适度泛化\n        if (record.age !== undefined) {\n          generalizedRecord.age = this.generalizeAge(record.age);\n        }\n        \n        // 收入字段进行适度泛化\n        if (record.income !== undefined) {\n          generalizedRecord.income = this.generalizeIncome(record.income);\n        }\n        \n        // 身份证字段进行严格泛化\n        if (record.idCard !== undefined) {\n          generalizedRecord.idCard = this.generalizeIdCard(record.idCard);\n        }\n        \n        // 地址字段进行泛化（保留城市级别信息）\n        if (record.address !== undefined) {\n          generalizedRecord.address = this.generalizeLocation(record.address);\n        }\n        \n        return generalizedRecord;\n      }\n      return record;\n    });\n  }\n  \n  /**\n   * 年龄泛化\n   * @param {any} age - 年龄\n   * @returns {string|any} 泛化后的年龄\n   */\n  generalizeAge(age) {\n    if (typeof age === 'number') {\n      if (age < 18) return 'minor';\n      if (age < 30) return 'young-adult';\n      if (age < 50) return 'middle-aged';\n      if (age < 65) return 'senior';\n      return 'elderly';\n    }\n    return age;\n  }\n  \n  /**\n   * 收入泛化\n   * @param {any} income - 收入\n   * @returns {string|any} 泛化后的收入\n   */\n  generalizeIncome(income) {\n    if (typeof income === 'number') {\n      if (income < 30000) return 'low';\n      if (income < 60000) return 'medium';\n      if (income < 100000) return 'high';\n      return 'very-high';\n    }\n    return income;\n  }\n  \n  /**\n   * 位置泛化\n   * @param {any} location - 位置\n   * @returns {string|any} 泛化后的位置\n   */\n  generalizeLocation(location) {\n    if (typeof location === 'string') {\n      // 只保留城市级别信息，移除具体地址\n      const parts = location.split(',');\n      if (parts.length > 1) {\n        return parts[0].trim(); // 只返回城市名\n      }\n      return location;\n    }\n    return location;\n  }\n  \n  /**\n   * 电话号码泛化\n   * @param {any} phone - 电话号码\n   * @returns {string|any} 泛化后的电话号码\n   */\n  generalizePhone(phone) {\n    if (typeof phone === 'string') {\n      // 移除详细号码信息，只保留区号\n      const matches = phone.match(/\\(\\d{3}\\)/); // 匹配区号格式 (XXX)\n      if (matches && matches[0]) {\n        return matches[0]; // 只返回区号\n      }\n      return '***';\n    }\n    return phone;\n  }\n  \n  /**\n   * 邮箱泛化\n   * @param {any} email - 邮箱\n   * @returns {string|any} 泛化后的邮箱\n   */\n  generalizeEmail(email) {\n    if (typeof email === 'string' && email.includes('@')) {\n      const [username, domain] = email.split('@');\n      // 隐藏用户名详细信息\n      const hiddenUsername = username.charAt(0) + '***' + username.charAt(username.length - 1);\n      return `${hiddenUsername}@${domain}`;\n    }\n    return email;\n  }\n  \n  /**\n   * 身份证号泛化（示例）\n   * @param {any} idCard - 身份证号\n   * @returns {string|any} 泛化后的身份证号\n   */\n  generalizeIdCard(idCard) {\n    if (typeof idCard === 'string' && idCard.length >= 18) {\n      // 保留前6位（地区码）和后1位（校验码），中间用*代替\n      return idCard.substring(0, 6) + '**********' + idCard.substring(17);\n    }\n    return idCard;\n  }\n  \n  /**\n   * 更新本地模型\n   * @param {Array} data - 数据\n   * @returns {Array} 更新后的数据\n   */\n  updateLocalModel(data) {\n    // 在实际实现中，这里会更新本地预测模型\n    // 简化实现，直接返回数据\n    console.log('Updating local model with privacy-preserving data');\n    return data;\n  }\n  \n  /**\n   * 重置隐私预算\n   */\n  resetPrivacyBudget() {\n    this.usedBudget = 0;\n  }\n  \n  /**\n   * 获取剩余隐私预算\n   * @returns {number} 剩余预算\n   */\n  getRemainingBudget() {\n    return this.privacyBudget - this.usedBudget;\n  }\n}","/**\n * 本地存储类\n * Local Storage Wrapper\n */\nexport class LocalStorage {\n  /**\n   * 构造函数\n   * @param {string} prefix - 存储键前缀\n   */\n  constructor(prefix = 'smart-form-') {\n    this.prefix = prefix;\n    this.isEnabled = this._testStorageAvailability();\n  }\n  \n  /**\n   * 测试存储可用性\n   * @returns {boolean} 是否可用\n   */\n  _testStorageAvailability() {\n    try {\n      const testKey = '__storage_test__';\n      window.localStorage.setItem(testKey, testKey);\n      window.localStorage.removeItem(testKey);\n      return true;\n    } catch (e) {\n      console.warn('Local storage is not available:', e);\n      return false;\n    }\n  }\n  \n  /**\n   * 设置存储项\n   * @param {string} key - 键\n   * @param {any} value - 值\n   */\n  setItem(key, value) {\n    if (!this.isEnabled) return;\n    \n    try {\n      const fullKey = this.prefix + key;\n      const serializedValue = JSON.stringify(value);\n      window.localStorage.setItem(fullKey, serializedValue);\n    } catch (e) {\n      console.error('Failed to set item in localStorage:', e);\n    }\n  }\n  \n  /**\n   * 获取存储项\n   * @param {string} key - 键\n   * @returns {any} 值\n   */\n  getItem(key) {\n    if (!this.isEnabled) return null;\n    \n    try {\n      const fullKey = this.prefix + key;\n      const serializedValue = window.localStorage.getItem(fullKey);\n      if (serializedValue === null) {\n        return null;\n      }\n      return JSON.parse(serializedValue);\n    } catch (e) {\n      console.error('Failed to get item from localStorage:', e);\n      return null;\n    }\n  }\n  \n  /**\n   * 删除存储项\n   * @param {string} key - 键\n   */\n  removeItem(key) {\n    if (!this.isEnabled) return;\n    \n    try {\n      const fullKey = this.prefix + key;\n      window.localStorage.removeItem(fullKey);\n    } catch (e) {\n      console.error('Failed to remove item from localStorage:', e);\n    }\n  }\n  \n  /**\n   * 清空所有存储项\n   */\n  clear() {\n    if (!this.isEnabled) return;\n    \n    try {\n      // 只清空带前缀的项\n      const keysToRemove = [];\n      for (let i = 0; i < window.localStorage.length; i++) {\n        const key = window.localStorage.key(i);\n        if (key && key.startsWith(this.prefix)) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      keysToRemove.forEach(key => {\n        window.localStorage.removeItem(key);\n      });\n    } catch (e) {\n      console.error('Failed to clear localStorage:', e);\n    }\n  }\n  \n  /**\n   * 获取所有带前缀的键\n   * @returns {Array} 键数组\n   */\n  getAllKeys() {\n    if (!this.isEnabled) return [];\n    \n    try {\n      const keys = [];\n      for (let i = 0; i < window.localStorage.length; i++) {\n        const key = window.localStorage.key(i);\n        if (key && key.startsWith(this.prefix)) {\n          keys.push(key.substring(this.prefix.length));\n        }\n      }\n      return keys;\n    } catch (e) {\n      console.error('Failed to get keys from localStorage:', e);\n      return [];\n    }\n  }\n}","/**\n * 字段验证器类\n * Field Validator\n */\nexport class FieldValidator {\n  /**\n   * 构造函数\n   */\n  constructor() {\n    // 预定义的验证规则\n    this.rules = {\n      email: this._validateEmail,\n      phone: this._validatePhone,\n      url: this._validateUrl,\n      number: this._validateNumber,\n      date: this._validateDate,\n      required: this._validateRequired\n    };\n  }\n  \n  /**\n   * 验证字段\n   * @param {HTMLElement} field - 字段元素\n   * @param {any} value - 字段值\n   * @returns {Object} 验证结果\n   */\n  validate(field, value) {\n    const fieldName = field.name || field.id || 'unknown';\n    const fieldType = field.type || 'text';\n    const validations = [];\n    \n    // 检查HTML5验证属性\n    if (field.required) {\n      validations.push({\n        rule: 'required',\n        valid: this.rules.required(value),\n        message: `${fieldName} is required`\n      });\n    }\n    \n    if (field.pattern) {\n      validations.push({\n        rule: 'pattern',\n        valid: this._validatePattern(value, field.pattern),\n        message: `${fieldName} does not match the required pattern`\n      });\n    }\n    \n    if (field.minLength) {\n      validations.push({\n        rule: 'minLength',\n        valid: this._validateMinLength(value, field.minLength),\n        message: `${fieldName} must be at least ${field.minLength} characters`\n      });\n    }\n    \n    if (field.maxLength) {\n      validations.push({\n        rule: 'maxLength',\n        valid: this._validateMaxLength(value, field.maxLength),\n        message: `${fieldName} must be no more than ${field.maxLength} characters`\n      });\n    }\n    \n    // 基于字段类型验证\n    if (this.rules[fieldType]) {\n      validations.push({\n        rule: fieldType,\n        valid: this.rules[fieldType](value),\n        message: `${fieldName} is not a valid ${fieldType}`\n      });\n    }\n    \n    // 基于字段名称验证\n    const nameBasedValidation = this._getNameBasedValidation(fieldName, value);\n    if (nameBasedValidation) {\n      validations.push(nameBasedValidation);\n    }\n    \n    // 检查是否有任何验证失败\n    const isValid = validations.every(validation => validation.valid);\n    \n    return {\n      valid: isValid,\n      validations: validations,\n      errors: validations.filter(v => !v.valid).map(v => v.message)\n    };\n  }\n  \n  /**\n   * 验证邮箱\n   * @param {any} value - 值\n   * @returns {boolean} 是否有效\n   */\n  _validateEmail(value) {\n    if (value === null || value === undefined || value === '') return true;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(value);\n  }\n  \n  /**\n   * 验证电话号码\n   * @param {any} value - 值\n   * @returns {boolean} 是否有效\n   */\n  _validatePhone(value) {\n    if (value === null || value === undefined || value === '') return true;\n    // 简化的电话号码验证\n    const phoneRegex = /^[\\+]?[\\d\\s\\-\\(\\)]{10,}$/;\n    return phoneRegex.test(value);\n  }\n  \n  /**\n   * 验证URL\n   * @param {any} value - 值\n   * @returns {boolean} 是否有效\n   */\n  _validateUrl(value) {\n    if (value === null || value === undefined || value === '') return true;\n    try {\n      new URL(value);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  \n  /**\n   * 验证数字\n   * @param {any} value - 值\n   * @returns {boolean} 是否有效\n   */\n  _validateNumber(value) {\n    if (value === null || value === undefined || value === '') return true;\n    return !isNaN(Number(value));\n  }\n  \n  /**\n   * 验证日期\n   * @param {any} value - 值\n   * @returns {boolean} 是否有效\n   */\n  _validateDate(value) {\n    if (value === null || value === undefined || value === '') return true;\n    // 简化的日期验证\n    return !isNaN(Date.parse(value));\n  }\n  \n  /**\n   * 验证必填字段\n   * @param {any} value - 值\n   * @returns {boolean} 是否有效\n   */\n  _validateRequired(value) {\n    if (value === null || value === undefined) return false;\n    return value.toString().trim() !== '';\n  }\n  \n  /**\n   * 验证正则表达式模式\n   * @param {any} value - 值\n   * @param {string} pattern - 正则表达式\n   * @returns {boolean} 是否有效\n   */\n  _validatePattern(value, pattern) {\n    if (value === null || value === undefined || value === '') return true;\n    try {\n      const regex = new RegExp(pattern);\n      return regex.test(value);\n    } catch (e) {\n      console.warn('Invalid pattern regex:', pattern);\n      return true; // 如果正则表达式无效，跳过验证\n    }\n  }\n  \n  /**\n   * 验证最小长度\n   * @param {any} value - 值\n   * @param {number} minLength - 最小长度\n   * @returns {boolean} 是否有效\n   */\n  _validateMinLength(value, minLength) {\n    if (value === null || value === undefined || value === '') return true;\n    return value.toString().length >= minLength;\n  }\n  \n  /**\n   * 验证最大长度\n   * @param {any} value - 值\n   * @param {number} maxLength - 最大长度\n   * @returns {boolean} 是否有效\n   */\n  _validateMaxLength(value, maxLength) {\n    if (value === null || value === undefined || value === '') return true;\n    return value.toString().length <= maxLength;\n  }\n  \n  /**\n   * 基于字段名称的验证\n   * @param {string} fieldName - 字段名称\n   * @param {any} value - 值\n   * @returns {Object|null} 验证结果或null\n   */\n  _getNameBasedValidation(fieldName, value) {\n    const lowerName = fieldName.toLowerCase();\n    \n    // 邮箱验证\n    if (lowerName.includes('email')) {\n      return {\n        rule: 'email',\n        valid: this._validateEmail(value),\n        message: 'Please enter a valid email address'\n      };\n    }\n    \n    // 电话验证\n    if (lowerName.includes('phone') || lowerName.includes('tel')) {\n      return {\n        rule: 'phone',\n        valid: this._validatePhone(value),\n        message: 'Please enter a valid phone number'\n      };\n    }\n    \n    // URL验证\n    if (lowerName.includes('url') || lowerName.includes('website')) {\n      return {\n        rule: 'url',\n        valid: this._validateUrl(value),\n        message: 'Please enter a valid URL'\n      };\n    }\n    \n    // 数字验证\n    if (lowerName.includes('number') || lowerName.includes('count') || lowerName.includes('amount')) {\n      return {\n        rule: 'number',\n        valid: this._validateNumber(value),\n        message: 'Please enter a valid number'\n      };\n    }\n    \n    return null;\n  }\n  \n  /**\n   * 添加自定义验证规则\n   * @param {string} ruleName - 规则名称\n   * @param {Function} validator - 验证函数\n   */\n  addRule(ruleName, validator) {\n    if (typeof validator === 'function') {\n      this.rules[ruleName] = validator;\n    } else {\n      throw new Error('Validator must be a function');\n    }\n  }\n  \n  /**\n   * 批量验证表单数据\n   * @param {Object} formData - 表单数据\n   * @param {Object} fieldElements - 字段元素映射\n   * @returns {Object} 验证结果\n   */\n  validateForm(formData, fieldElements = {}) {\n    const results = {};\n    let isFormValid = true;\n    \n    for (const [fieldName, value] of Object.entries(formData)) {\n      const fieldElement = fieldElements[fieldName] || { name: fieldName };\n      const fieldResult = this.validate(fieldElement, value);\n      \n      results[fieldName] = fieldResult;\n      if (!fieldResult.valid) {\n        isFormValid = false;\n      }\n    }\n    \n    return {\n      valid: isFormValid,\n      fields: results\n    };\n  }\n}","import { FieldRelationshipGraph } from './FieldRelationshipGraph.js';\nimport { FieldPredictionModel } from './FieldPredictionModel.js';\nimport { FeatureEngine } from './FeatureEngine.js';\nimport { CrossSessionLearner } from './CrossSessionLearner.js';\nimport { RealTimePredictionEngine } from './RealTimePredictionEngine.js';\nimport { PrivacyPreservingLearner } from './PrivacyPreservingLearner.js';\nimport { LocalStorage } from './LocalStorage.js';\nimport { FieldValidator } from './FieldValidator.js';\n\n/**\n * 智能表单预测主类\n * Smart Form Predictor Main Class\n */\nexport class SmartFormPredictor {\n  /**\n   * 构造函数\n   * @param {Object} options - 配置选项\n   */\n  constructor(options = {}) {\n    this.models = new Map();      // 字段预测模型\n    this.patterns = new Map();    // 用户行为模式\n    this.storage = new LocalStorage(); // 本地数据存储\n    this.validator = new FieldValidator(); // 字段验证器\n    \n    // 默认配置\n    this.config = {\n      learning: true,\n      privacy: {\n        localOnly: true,\n        autoForget: true,\n        anonymize: true\n      },\n      prediction: {\n        confidenceThreshold: 0.7,\n        maxSuggestions: 3,\n        autoComplete: 'smart'\n      },\n      ui: {\n        highlightPredictions: true,\n        showConfidence: false,\n        animation: 'smooth'\n      },\n      ...options\n    };\n    \n    // 初始化子模块\n    this.relationshipGraph = new FieldRelationshipGraph();\n    this.featureEngine = new FeatureEngine();\n    this.crossSessionLearner = new CrossSessionLearner();\n    this.predictionEngine = new RealTimePredictionEngine();\n    this.privacyLearner = new PrivacyPreservingLearner();\n  }\n  \n  /**\n   * 初始化表单监控\n   * @param {string|Array} formSelector - 表单选择器\n   */\n  async init(formSelector) {\n    console.log('Initializing SmartFormPredictor...');\n    \n    // 支持单个或多个表单选择器\n    const selectors = Array.isArray(formSelector) ? formSelector : [formSelector];\n    \n    // 为每个表单添加监控\n    for (const selector of selectors) {\n      const forms = document.querySelectorAll(selector);\n      forms.forEach(form => this._attachFormListeners(form));\n    }\n    \n    // 加载已保存的模型和模式\n    await this._loadStoredData();\n    \n    console.log('SmartFormPredictor initialized successfully.');\n    return this;\n  }\n  \n  /**\n   * 为表单添加事件监听器\n   * @param {HTMLElement} form - 表单元素\n   */\n  _attachFormListeners(form) {\n    // 监听输入事件用于实时预测\n    form.addEventListener('input', (event) => {\n      this._handleInput(event);\n    });\n    \n    // 监听表单提交事件用于学习\n    form.addEventListener('submit', (event) => {\n      this._handleFormSubmit(event);\n    });\n    \n    // 监听焦点事件\n    form.addEventListener('focusin', (event) => {\n      this._handleFocusIn(event);\n    });\n    \n    form.addEventListener('focusout', (event) => {\n      this._handleFocusOut(event);\n    });\n  }\n  \n  /**\n   * 处理输入事件\n   * @param {Event} event - 输入事件\n   */\n  async _handleInput(event) {\n    const field = event.target;\n    if (field.tagName !== 'INPUT' && field.tagName !== 'TEXTAREA' && field.tagName !== 'SELECT') {\n      return;\n    }\n    \n    // 获取当前表单状态\n    const form = field.closest('form');\n    const formState = this._getFormState(form);\n    \n    // 提取特征\n    const features = this.featureEngine.extractFeatures(field, formState);\n    \n    // 进行预测\n    const prediction = await this.predictionEngine.predictFieldValue(field, features);\n    \n    // 显示建议（如果置信度足够高）\n    if (prediction.confidence >= this.config.prediction.confidenceThreshold) {\n      this._showSuggestions(field, prediction);\n    }\n  }\n  \n  /**\n   * 处理表单提交事件\n   * @param {Event} event - 提交事件\n   */\n  async _handleFormSubmit(event) {\n    const form = event.target;\n    const formData = new FormData(form);\n    const formDataObj = {};\n    \n    // 将FormData转换为普通对象\n    for (const [key, value] of formData.entries()) {\n      formDataObj[key] = value;\n    }\n    \n    // 从提交中学习\n    await this.learnFromSubmission(formDataObj);\n  }\n  \n  /**\n   * 处理焦点进入事件\n   * @param {Event} event - 焦点事件\n   */\n  _handleFocusIn(event) {\n    // 记录用户开始编辑时间\n    const field = event.target;\n    field.dataset.focusStartTime = Date.now();\n  }\n  \n  /**\n   * 处理焦点离开事件\n   * @param {Event} event - 焦点事件\n   */\n  _handleFocusOut(event) {\n    // 可以在这里分析用户的编辑行为\n  }\n  \n  /**\n   * 获取表单状态\n   * @param {HTMLElement} form - 表单元素\n   * @returns {Object} 表单状态对象\n   */\n  _getFormState(form) {\n    const state = {};\n    const fields = form.querySelectorAll('input, textarea, select');\n    \n    fields.forEach(field => {\n      if (field.name) {\n        state[field.name] = {\n          value: field.value,\n          type: field.type,\n          tagName: field.tagName,\n          focused: document.activeElement === field,\n          focusStartTime: field.dataset.focusStartTime || null\n        };\n      }\n    });\n    \n    return state;\n  }\n  \n  /**\n   * 显示预测建议\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} prediction - 预测结果\n   */\n  _showSuggestions(field, prediction) {\n    // 在控制台显示预测建议\n    console.log(`Suggestion for ${field.name}: ${prediction.value} (confidence: ${prediction.confidence})`);\n    \n    // 如果有替代建议，也在控制台显示\n    if (prediction.alternatives && prediction.alternatives.length > 0) {\n      console.log(`Alternatives for ${field.name}:`, prediction.alternatives);\n    }\n    \n    // 触发自定义事件，让UI层可以监听并显示建议\n    const event = new CustomEvent('smart-form-suggestion', {\n      detail: {\n        field: field,\n        fieldName: field.name,\n        fieldValue: field.value,\n        prediction: prediction\n      }\n    });\n    field.dispatchEvent(event);\n  }\n  \n  /**\n   * 预测字段值\n   * @param {HTMLElement} field - 字段元素\n   * @param {Object} context - 上下文信息\n   * @returns {Promise<Object>} 预测结果\n   */\n  async predict(field, context) {\n    const features = this.featureEngine.extractFeatures(field, context);\n    return await this.predictionEngine.predictFieldValue(field, features);\n  }\n  \n  /**\n   * 从提交中学习\n   * @param {Object} formData - 表单数据\n   */\n  async learnFromSubmission(formData) {\n    if (!this.config.learning) return;\n    \n    // 使用隐私保护方式学习\n    const privateData = this.config.privacy.anonymize ? \n      this.privacyLearner.learnWithPrivacy([formData], 0.1) : \n      [formData];\n    \n    // 更新模型\n    await this._updateModels(privateData[0]);\n    \n    // 将数据添加到预测引擎的训练数据中\n    this.predictionEngine.addTrainingData(privateData[0]);\n    \n    // 保存学习到的模式\n    await this._savePatterns();\n  }\n  \n  /**\n   * 更新预测模型\n   * @param {Object} formData - 表单数据\n   */\n  async _updateModels(formData) {\n    // 更新字段关系图谱\n    this.relationshipGraph.discoverRelationships([formData]);\n    \n    // 跨会话学习\n    this.crossSessionLearner.learnCrossSessionPatterns([formData]);\n    \n    // 更新模式数据\n    this._updatePatterns(formData);\n    \n    // 为每个字段更新预测模型\n    for (const [fieldName, value] of Object.entries(formData)) {\n      if (!this.models.has(fieldName)) {\n        // 根据字段类型创建模型\n        const fieldType = this._detectFieldType(fieldName, value);\n        this.models.set(fieldName, new FieldPredictionModel(fieldType));\n      }\n      \n      // 更新模型（简化实现）\n      const model = this.models.get(fieldName);\n      // 在实际实现中，这里会有更多的训练逻辑\n    }\n  }\n  \n  /**\n   * 更新模式数据\n   * @param {Object} formData - 表单数据\n   */\n  _updatePatterns(formData) {\n    // 为每个字段更新模式数据\n    for (const [fieldName, value] of Object.entries(formData)) {\n      // 如果该字段还没有模式数据，创建一个新的Set\n      if (!this.patterns.has(fieldName)) {\n        this.patterns.set(fieldName, new Set());\n      }\n      \n      // 将值添加到模式数据中\n      const fieldPatterns = this.patterns.get(fieldName);\n      fieldPatterns.add(value);\n    }\n  }\n  \n  /**\n   * 检测字段类型\n   * @param {string} fieldName - 字段名称\n   * @param {any} value - 字段值\n   * @returns {string} 字段类型\n   */\n  _detectFieldType(fieldName, value) {\n    // 基于字段名和值的启发式检测\n    if (typeof value === 'number') return 'numerical';\n    if (typeof value === 'string') {\n      if (fieldName.includes('email')) return 'email';\n      if (fieldName.includes('phone')) return 'phone';\n      if (fieldName.includes('date')) return 'date';\n      return 'text';\n    }\n    return 'generic';\n  }\n  \n  /**\n   * 获取输入建议\n   * @param {string} field - 字段名\n   * @param {string} partialValue - 部分输入值\n   * @returns {Array} 建议列表\n   */\n  getSuggestions(field, partialValue) {\n    // 简化实现，实际应该基于模型预测\n    const suggestions = [];\n    if (this.patterns.has(field)) {\n      const fieldPatterns = this.patterns.get(field);\n      // 基于历史模式生成建议\n      for (const pattern of fieldPatterns) {\n        if (pattern.startsWith(partialValue)) {\n          suggestions.push(pattern);\n        }\n      }\n    }\n    return suggestions.slice(0, this.config.prediction.maxSuggestions);\n  }\n  \n  /**\n   * 加载存储的数据\n   */\n  async _loadStoredData() {\n    try {\n      const storedModels = this.storage.getItem('smart-form-models');\n      const storedPatterns = this.storage.getItem('smart-form-patterns');\n      \n      if (storedModels) {\n        // 恢复模型（简化实现）\n        Object.keys(storedModels).forEach(fieldName => {\n          const modelData = storedModels[fieldName];\n          const model = new FieldPredictionModel(modelData.fieldType);\n          // 恢复模型状态\n          this.models.set(fieldName, model);\n        });\n      }\n      \n      if (storedPatterns) {\n        // 恢复模式\n        Object.keys(storedPatterns).forEach(fieldName => {\n          this.patterns.set(fieldName, new Set(storedPatterns[fieldName]));\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to load stored data:', error);\n    }\n  }\n  \n  /**\n   * 保存模式数据\n   */\n  async _savePatterns() {\n    try {\n      // 转换Map为可序列化的对象\n      const serializablePatterns = {};\n      for (const [key, value] of this.patterns.entries()) {\n        serializablePatterns[key] = Array.from(value);\n      }\n      \n      this.storage.setItem('smart-form-patterns', serializablePatterns);\n    } catch (error) {\n      console.warn('Failed to save patterns:', error);\n    }\n  }\n  \n  /**\n   * 静态初始化方法\n   * @param {Object} options - 配置选项\n   * @returns {Promise<SmartFormPredictor>} 初始化后的实例\n   */\n  static async init(options) {\n    const predictor = new SmartFormPredictor(options);\n    // 如果提供了表单选择器，则自动初始化\n    if (options && options.forms) {\n      await predictor.init(options.forms);\n    }\n    return predictor;\n  }\n}"],"names":[],"mappings":"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"}